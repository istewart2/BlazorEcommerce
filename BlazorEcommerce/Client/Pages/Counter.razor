@page "/counter"
@using BlazorEcommerce.Client.Helper;
@using BlazorEcommerce.Client.Services.StateManagement;
@using BlazorEcommerce.Client.Services.Store.Counter;
@using Fluxor;
@inject IJSRuntime _JsRuntime;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @UserApplicationState.CounterValue</p>

<p role="status">Fluxor current count: @CounterState.Value.ClickCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="IncrementCountFluxor">Fluxor - click me</button>

<button class="btn btn-success" @onclick="ShowToastSuccess">Show Toast - Success</button>

<button class="btn btn-danger" @onclick="ShowToastError">Show Toast - Error</button>

@code {

    [CascadingParameter] protected UserApplicationState UserApplicationState { get; set; }

    [Inject]
    private IState<CounterState> CounterState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private void IncrementCountFluxor()
    {
        var action = new IncrementCounterAction();
        Dispatcher.Dispatch(action);
    }

    private void IncrementCount()
    {
        UserApplicationState.CounterValue++;
    }

    private async void ShowToastSuccess()
    {
        //await _JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Success");
        await _JsRuntime.ToastrSuccess("Great success!");
    }

    private async void ShowToastError()
    {
        //await _JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Error");
        await _JsRuntime.ToastrError("Errroooorrrrrrrr!");
    }
}
